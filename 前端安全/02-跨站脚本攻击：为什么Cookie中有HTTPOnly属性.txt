页面中的第三方资源引用和 CORS 也带来了很多安全问题，其中最典型的就是 XSS 攻击。

1. 什么是XSS攻击
    XSS全称是Cross Site Scripting，翻译过来就是“跨站脚本”。XSS攻击是指黑客往
    HTML文件中或者DOM中注入恶意脚本，从而在用户浏览页面时利用注入的恶意脚本对用户
    实施攻击的一种手段

    最开始的时候，这种攻击是通过跨域来实现的，所以叫“跨域脚本”。但是发展到现在，往 
    HTML 文件中注入恶意代码的方式越来越多了，所以是否跨域注入脚本已经不是唯一的注入手段了，
    但是 XSS 这个名字却一直保留至今。

    当页面被注入了恶意 JavaScript 脚本时，浏览器无法区分这些脚本是被恶意注入的还是正常的
    页面内容，所以恶意注入 JavaScript 脚本也拥有所有的脚本权限


    恶意脚本都能做哪些事情

    1. 窃取Cookie信息：恶意 JavaScript 可以通过“document.cookie”获取 Cookie 信息，然
       后通过 XMLHttpRequest 或者 Fetch 加上 CORS 功能将数据发送给恶意服务器；恶意服务
       器拿到用户的 Cookie 信息之后，就可以在其他电脑上模拟用户的登录，然后进行转账等操作。

    2. 监听用户行为：恶意 JavaScript 可以使用“addEventListener”接口来监听键盘事件，比如
       可以获取用户输入的信用卡等信息，将其发送到恶意服务器。黑客掌握了这些信息之后，又可以
       做很多违法的事情。

    3. 修改DOM伪造登录窗口：用来欺骗用户输入用户名和密码等信息

    4. 在页面内生成浮窗广告：这些广告会严重地影响用户体验

    如果让页面插入了恶意脚本，那么就相当于把我们页面的隐私数据和行为完全暴露给黑客了。


    恶意脚本是怎么注入的
    主要有存储型 XSS 攻击、反射型 XSS 攻击和基于 DOM 的 XSS 攻击三种方式来注入恶意脚本。

    1. 存储型XSS攻击
        存储型 XSS 攻击大致需要经过如下步骤
        1. 首先黑客利用站点漏洞将一段恶意 JavaScript 代码提交到网站的数据库中（form表单提交脚本）
        2. 然后用户向网站请求包含了恶意 JavaScript 脚本的页面
        3. 当用户浏览该页面的时候，恶意脚本就会将用户的 Cookie 信息等数据上传到服务器

    2. 反射型XSS攻击
        http://localhost:3000/?xss=<script>alert('你被xss攻击了')</script>
        用户将一段含有恶意代码的请求提交给 Web 服务器，Web 服务器接收到请求时，又将恶意代码反射
        给了浏览器端，这就是反射型 XSS 攻击。在现实生活中，黑客经常会通过 QQ 群或者邮件等渠道诱
        导用户去点击这些恶意链接，所以对于一些链接我们一定要慎之又慎。

        另外需要注意的是，Web 服务器不会存储反射型 XSS 攻击的恶意脚本，这是和存储型 XSS 攻击不
        同的地方。

    3. 基于DOM的XSS攻击
        基于 DOM 的 XSS 攻击是不牵涉到页面 Web 服务器的。具体来讲，黑客通过各种手段将恶意脚本注入
        用户的页面中，比如通过网络劫持在页面传输过程中修改 HTML 页面的内容，这种劫持类型很多，有通
        过 WiFi 路由器劫持的，有通过本地恶意软件来劫持的，它们的共同点是在 Web 资源传输过程或者在
        用户使用页面的过程中修改 Web 页面的数据。

2. 如何阻止XSS攻击
    存储型和反射型XSS攻击都需要Web服务器处理，这两种漏洞是服务端的安全漏洞，而基于DOM的XSS攻击
    全部都是在浏览器端完成的，因此基于DOM的XSS攻击是属于前端的安全漏洞

    无论何种类型的XSS攻击都有一个共同特点：首先往浏览器中注入恶意脚本，然后再通过恶意脚本将用户
    信息发送至黑客部署的恶意服务器

    阻止XSS攻击，可以通过阻止恶意JavaScript脚本的注入和恶意消息的发送来实现

    1. 服务器对输入脚本进行过滤或转码

    2. 充分利用CSP（内容安全策略）
        虽然在服务器端执行过滤或者转码可以阻止 XSS 攻击的发生，但完全依靠服务器端依然是不够的，
        我们还需要把 CSP 等策略充分地利用起来，以降低 XSS 攻击带来的风险和后果。

        实施严格的 CSP 可以有效地防范 XSS 攻击，具体来讲 CSP 有如下几个功能：

        1. 限制加载其他域下的资源文件，这样即使黑客插入了一个 JavaScript 文件，这个 JavaScript
           文件也是无法被加载的；
        2. 禁止向第三方域提交数据，这样用户数据也不会外泄；
        3. 禁止执行内联脚本和未授权的脚本；
        4. 还提供了上报机制，这样可以帮助我们尽快发现有哪些 XSS 攻击，以便尽快修复问题。

    3. 使用HttpOnly属性
        由于很多 XSS 攻击都是来盗用 Cookie 的，因此还可以通过使用 HttpOnly 属性来保护我们 
        Cookie 的安全。

        通常服务器可以将某些 Cookie 设置为 HttpOnly 标志，HttpOnly 是服务器通过 HTTP 响应
        头来设置的

        set-cookie: NID=189=M8q2FtWbsR8RlcldPVt7qkrqR38LmFY9jUxkKo3-4Bi6Qu_ocNOat7nkYZ
                    UTzolHjFnwBw0izgsATSI7TZyiiiaV94qGh-BzEYsNVa7TZmjAYTxYTOM9L_-0CN9i
                    pL6cXi8l6-z41asXtm2uEwcOC5oh9djkffOMhWqQrlnCtOI; expires=Sat, 
                    18-Apr-2020 06:52:22 GMT; path=/; domain=.google.com; HttpOnly

                    set-cookie 属性值最后使用了 HttpOnly 来标记该 Cookie。顾名思义，使用 
                    HttpOnly 标记的 Cookie 只能使用在 HTTP 请求过程中，所以无法通过 JavaScript 
                    来读取这段 Cookie。

        

