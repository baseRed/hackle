1. 什么是CSRF攻击

    全称是：Cross-site request forgery 又称为“跨站请求伪造”，是指黑客引诱用户打开黑客的网站
        在黑客的网站中，利用用户的登录状态发起跨站请求

        简单说就是：CSRF 攻击就是黑客利用了用户的登录状态，并通过第三方的站点来做一些坏事。

    通常当用户打开了黑客的页面后，黑客有三种方式去实施 CSRF 攻击

    1. 自动发起 Get 请求
        https://time.geekbang.org/sendcoin（用户网站转账接口）

        <img src="https://time.geekbang.org/sendcoin?user=hacker&number=100">

    2. 自动发起 POST 请求

        黑客在他的页面中构建了一个隐藏的表单，该表单的内容就是
        用户网站的转账接口。当用户打开该站点之后，这个表单会被自动执行提交；当表单被提交
        之后，服务器就会执行转账操作。因此使用构建自动提交表单这种方式，就可以自动实现跨
        站点 POST 数据提交。

    3. 引诱用户点击链接


    和 XSS 不同的是，CSRF 攻击不需要将恶意代码注入用户的页面，仅仅是利用服务器的漏洞和用户的登录
    状态来实施攻击。



2. 如何防止 CSRF 攻击

    发起 CSRF 攻击的三个必要条件：
    1. 目标站点一定要有 CSRF 漏洞
    2. 用户要登录过目标站点，并且在浏览器上保持有该站点的登录状态
    3. 需要用户打开一个第三方站点，可以是黑客的站点，也可以是一些论坛

    与 XSS 攻击不同，CSRF 攻击不会往页面注入恶意脚本，因此黑客是无法通过 CSRF
    攻击来获取用户页面数据的；其最关键的一点是要能找到服务器的漏洞，所以说对于 CSRF
    攻击我们主要的防护手段是提升服务器的安全性

    要让服务器避免遭受到 CSRF 攻击，通常有以下几种途径。

    1. 充分利用好 Cookie 的 SameSite 属性

    通常 CSRF 攻击都是从第三方站点发起的，要防止 CSRF 攻击，我们最好能实现从第三方
    站点发送请求时禁止 Cookie 的发送，因此在浏览器通过不同来源发送 HTTP 请求时，有
    如下区别：

    如果是从第三方站点发起的请求，那么需要浏览器禁止发送某些关键 Cookie 数据到服
    务器；
    如果是同一个站点发起的请求，那么就需要保证 Cookie 数据正常发送。

    SameSite 是怎么防止 CSRF 攻击的
    在 HTTP 响应头中，通过 set-cookie 字段设置 Cookie 时，可以带上 SameSite 选项

    SameSite 选项通常有 Strict、Lax 和 None 三个值。

    Strict 最为严格。如果 SameSite 的值是 Strict，那么浏览器会完全禁止第三方Cookie。

    Lax 相对宽松一点。在跨站点的情况下，从第三方站点的链接打开和从第三方站点提交
    Get 方式的表单这两种方式都会携带 Cookie。但如果在第三方站点中使用 Post 方法，
    或者通过 img、iframe 等标签加载的 URL，这些场景都不会携带 Cookie。

    而如果使用 None 的话，在任何情况下都会发送 Cookie 数据。

    2. 验证请求的来源站点
       在服务器端验证请求来源的站点

       怎么判断请求是否来自第三方站点

       HTTP 请求头中的 Referer 和 Origin 属性

       Referer 是 HTTP 请求头中的一个字段，记录了该 HTTP 请求的来源地址

       虽然可以通过 Referer 告诉服务器 HTTP 请求的来源，但是有一些场景是不适合将来源
       URL 暴露给服务器的


       在一些重要的场合，比如通过 XMLHttpRequest、Fecth 发起跨站请求或者通过 Post
       方法发送请求时，都会带上 Origin 属性



       Origin 属性只包含了域名信息，并没有包含具体的 URL 路径


       服务器的策略是优先判断 Origin，如果请求头中没有包含 Origin 属性，再根据实际
       情况判断是否使用 Referer 值。

    3. CSRF Token

        第一步，在浏览器向服务器发起请求时，服务器生成一个 CSRF Token。CSRF Token 其实
        就是服务器生成的字符串，然后将该字符串植入到返回的页面中

        第二步，在浏览器端如果要发起转账的请求，那么需要带上页面中的 CSRF Token，然后服
        务器会验证该 Token 是否合法。如果是从第三方站点发出的请求，那么将无法获取到
        CSRF Token 的值，所以即使发出了请求，服务器也会因为 CSRF Token 不正确而拒绝请
        求。











